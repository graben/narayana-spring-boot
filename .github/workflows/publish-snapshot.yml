# Debugging job used to test Maven Central publishing after the Sonatype migration.
# This workflow is triggered manually and intended for validation and troubleshooting,
# not for production releases.

name: Snapshot & Debugging release job
on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Snapshot version to use (must end with -SNAPSHOT)'
        required: true

env:
  RELEASE_VERSION: ${{ github.event.inputs.release_version }}

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Validate that version is a SNAPSHOT
        run: |
          if [[ "$RELEASE_VERSION" != *-SNAPSHOT ]]; then
           echo "ERROR: RELEASE_VERSION must be a SNAPSHOT version. Current value: $RELEASE_VERSION"
           exit 1
          fi

      - uses: actions/checkout@v2
      # Install JDK
      # Configure the maven settings.xml and add a server entry with maven central token username/password and GPG private key
      # The server-username, server-password and gpg-passphrase are declared as env variables.
      - name: Set up Java and settings.xml to access Maven Central Repository
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'adopt'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_SECRET_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      # Confirm GPG key is correctly imported by signing a dummy file
      - name: Check the gpg key imported and sign a dummy file
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          set -ex
          
          gpg --list-keys
          
          echo "thisisafiletosign" > thisisafiletosign.txt
          rm -f -- thisisafiletosign.txt.asc
        
          gpg --local-user snowdrop-core@redhat.com --armor --detach-sign \
            --status-fd 1 --batch --yes --no-tty --pinentry-mode loopback \
            --passphrase "$GPG_PASSPHRASE" \
            --output thisisafiletosign.txt.asc thisisafiletosign.txt 

          cat thisisafiletosign.txt.asc

      # Deploy the project using the release profile and check GPG signing
      - name: 'Create a release and upload the bundle'
        run: |
         mvn versions:set -DprocessAllModules=true -DnewVersion=$RELEASE_VERSION
         mvn -B deploy -Prelease -DskipTests
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      # Verify that the generated artifacts have been correctly signed
      - name: Check files signed
        run: |
          set -ex
          
          cd target/central-publishing
          unzip central-bundle.zip
          gpg --verify dev/snowdrop/narayana-spring-boot-recovery-controller/$RELEASE_VERSION/narayana-spring-boot-recovery-controller-$RELEASE_VERSION-sources.jar.asc
          
